{
    "version": "https://jsonfeed.org/version/1",
    "title": "李惠帅",
    "subtitle": "This is my blog",
    "icon": "http://yoursite.com/images/favicon.ico",
    "description": "欢迎你来",
    "home_page_url": "http://yoursite.com",
    "items": [
        {
            "id": "http://yoursite.com/philosophy/modern-philosophy/thought-notes/introduction/",
            "url": "http://yoursite.com/philosophy/modern-philosophy/thought-notes/introduction/",
            "title": "导言 近现代哲学存在的意义",
            "date_published": "2021-10-04T02:20:48.000Z",
            "content_html": "",
            "tags": [
                "哲学",
                "近现代哲学",
                "西方现代思想讲义",
                "近现代",
                "哲学",
                "读书笔记"
            ]
        },
        {
            "id": "http://yoursite.com/literature/ancient-literature/al-introduction/lesson1/",
            "url": "http://yoursite.com/literature/ancient-literature/al-introduction/lesson1/",
            "title": "导论 中国古典文学组成",
            "date_published": "2021-10-02T02:20:48.000Z",
            "content_html": "<h1 id=\"中国古典文学组成\"><a class=\"anchor\" href=\"#中国古典文学组成\">#</a> 中国古典文学组成</h1>\n",
            "tags": [
                "文学",
                "古典文学",
                "中国古典文学概论",
                "中国",
                "古典文学",
                "文学史"
            ]
        },
        {
            "id": "http://yoursite.com/literature/modern-literature/chinese-homl/lesson1/",
            "url": "http://yoursite.com/literature/modern-literature/chinese-homl/lesson1/",
            "title": "第01课 现代小说起源",
            "date_published": "2021-10-02T02:20:48.000Z",
            "content_html": "<h1 id=\"现代小说起源\"><a class=\"anchor\" href=\"#现代小说起源\">#</a> 现代小说起源</h1>\n",
            "tags": [
                "文学",
                "现代文学",
                "中国近现代文学史",
                "中国",
                "文学史",
                "近现代"
            ]
        },
        {
            "id": "http://yoursite.com/computer-science/program-language/c/lesson-2/",
            "url": "http://yoursite.com/computer-science/program-language/c/lesson-2/",
            "title": "第02课 C语言基本语法",
            "date_published": "2021-10-01T13:20:48.000Z",
            "content_html": "<h1 id=\"c-语言基本语法\"><a class=\"anchor\" href=\"#c-语言基本语法\">#</a> C 语言基本语法</h1>\n<h2 id=\"语句\"><a class=\"anchor\" href=\"#语句\">#</a> 语句</h2>\n<p>C 语言的代码由一行行语句（statement）组成。语句就是程序执行的一个操作命令。C 语言规定，语句必须使用分号结尾，除非有明确规定可以不写分号。</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">int</span> x <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>上面就是一个变量声明语句，声明整数变量 <code>x</code> ，并且将值设为 <code>1</code> 。</p>\n<p>多个语句可以写在一行。</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">int</span> x<span class=\"token punctuation\">;</span> x <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>上面示例是两个语句写在一行。所以，语句之间的换行符并不是必需的，只是为了方便阅读代码。</p>\n<p>一个语句也可以写成多行，这时就要依靠分号判断语句在哪一行结束。</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">int</span> x<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>x</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token operator\">=</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>上面示例中，第二个语句 <code>x = 1;</code>  被拆成了四行。编译器会自动忽略代码里面的换行。</p>\n<p>单个分号也是有效语句，称为 “空语句”，虽然毫无作用。</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h2 id=\"表达式\"><a class=\"anchor\" href=\"#表达式\">#</a> 表达式</h2>\n<p>C 语言的各种计算，主要通过表达式完成。表达式（expression）是一个计算式，用来获取值。</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token number\">1</span> <span class=\"token operator\">+</span> <span class=\"token number\">2</span></pre></td></tr></table></figure><p>上面代码就是一个表达式，用来获取 <code>1 + 2</code>  这个算术计算的结果。</p>\n<p>表达式加上分号，也可以成为语句，但是没有实际的作用。</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token number\">8</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token number\">3</span> <span class=\"token operator\">+</span> <span class=\"token number\">4</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>上面示例是两个表达式，加上分号以后成为语句。</p>\n<p>表达式与语句的区别主要是两点：</p>\n<ul>\n<li>语句可以包含表达式，但是表达式本身不构成语句。</li>\n<li>表达式都有返回值，语句不一定有。因为语句用来执行某个命令，很多时候不需要返回值，比如变量声明语句（ <code>int x = 1</code> ）就没有返回值。</li>\n</ul>\n<h2 id=\"语句块\"><a class=\"anchor\" href=\"#语句块\">#</a> 语句块</h2>\n<p>C 语言允许多个语句使用一对大括号 <code>&#123;&#125;</code> ，组成一个块，也称为复合语句（compounded statement）。在语法上，语句块可以视为多个语句组成的一个复合语句。</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token keyword\">int</span> x<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  x <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>上面示例中，大括号形成了一个语句块。</p>\n<p>大括号的结尾不需要添加分号。</p>\n<h2 id=\"空格\"><a class=\"anchor\" href=\"#空格\">#</a> 空格</h2>\n<p>C 语言里面的空格，主要用来帮助编译器区分语法单位。如果语法单位不用空格就能区分，空格就不是必须的，只是为了增加代码的可读性。</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">int</span> x <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">// 等同于</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">int</span> x<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>上面示例中，赋值号（ <code>=</code> ）前后有没有空格都可以，因为编译器这里不借助空格，就能区分语法单位。</p>\n<p>语法单位之间的多个空格，等同于单个空格。</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">int</span>    x <span class=\"token operator\">=</span>     <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>上面示例中，各个语法单位之间的多个空格，跟单个空格的效果是一样的。</p>\n<p>空格还用来表示缩进。多层级的代码有没有缩进，其实对于编译器来说并没有差别，没有缩进的代码也是完全可以运行的。强调代码缩进，只是为了增强代码可读性，便于区分代码块。</p>\n<p>大多数 C 语言的风格要求是，下一级代码比上一级缩进 4 个空格。为了书写的紧凑，本书采用缩写两个空格。</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 缩进四个空格</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>x <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"positive\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">// 缩进两个空格</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>x <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"positive\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>只包含空格的行被称为空白行，编译器会完全忽略该行。</p>\n<h2 id=\"注释\"><a class=\"anchor\" href=\"#注释\">#</a> 注释</h2>\n<p>注释是对代码的说明，编译器会忽略注释，也就是说，注释对实际代码没有影响。</p>\n<p>C 语言的注释有两种表示方法。第一种方法是将注释放在 <code>/*...*/</code>  之间，内部可以分行。</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/* 注释 */</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  这是一行注释</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>*/</span></pre></td></tr></table></figure><p>这种注释可以插在行内。</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">open</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span><span class=\"token operator\">*</span> s <span class=\"token comment\">/* file name */</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> mode<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>上面示例中， <code>/* file name */</code>  用来对函数参数进行说明，跟在它后面的代码依然会有效执行。</p>\n<p>这种注释一定不能忘记写结束符号 <code>*/</code> ，否则很容易导致错误。</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"a \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">/* 注释一</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>printf (\"b\");</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>printf (\"c\"); /* 注释二 */</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"d \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>上面示例的原意是，第一行和第三行代码的尾部，有两个注释。但是，第一行注释忘记写结束符号，导致注释一延续到第三行结束。</p>\n<p>第二种写法是将注释放在双斜杠 <code>//</code>  后面，从双斜杠到行尾都属于注释。这种注释只能是单行，可以放在行首，也可以放在一行语句的结尾。这是 C99 标准新增的语法。</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 这是一行注释</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">int</span> x <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 这也是注释</span></pre></td></tr></table></figure><p>不管是哪一种注释，都不能放在双引号里面。双引号里面的注释符号，会成为字符串的一部分，解释为普通符号，失去注释作用。</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"// hello /* world */ \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>上面示例中，双引号里面的注释符号，都会被视为普通字符，没有注释作用。</p>\n<p>编译时，注释会被替换成一个空格，所以 <code>min/* space */Value</code>  会变成 <code>min Value</code> ，而不是 <code>minValue</code> 。</p>\n<h2 id=\"printf\"><a class=\"anchor\" href=\"#printf\">#</a> printf()</h2>\n<h3 id=\"基本用法\"><a class=\"anchor\" href=\"#基本用法\">#</a> 基本用法</h3>\n<p>本书的示例会大量用到 <code>printf()</code>  函数，这里先介绍一下这个函数。</p>\n<p><code>printf()</code>  的作用是将参数文本输出到屏幕。它名字里面的 <code>f</code>  代表 <code>format</code> （格式化），表示可以定制输出文本的格式。</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Hello World\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>上面命令会在屏幕上输出一行文字 “Hello World”。</p>\n<p><code>printf()</code>  不会在行尾自动添加换行符，运行结束后，光标就停留在输出结束的地方，不会自动换行。为了让光标移到下一行的开头，可以在输出文本的结尾，添加一个换行符 <code>\\n</code> 。</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Hello World\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>如果文本内部有换行，也是通过插入换行符来实现。</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Hello\\nWorld\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>上面示例先输出一个 <code>Hello</code> ，然后换行，在下一行开头输出 <code>World</code> ，然后又是一个换行。</p>\n<p>上面示例也可以写成两个 <code>printf()</code> ，效果完全一样。</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Hello\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"World\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p><code>printf()</code>  是在标准库的头文件 <code>stdio.h</code>  定义的。使用这个函数之前，必须在源码文件头部引入这个头文件。</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Hello World\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>上面示例中，只有在源码头部加上 <code>#include &lt;stdio.h&gt;</code> ，才能使用 <code>printf()</code>  这个函数。 <code>#include</code>  指令的详细解释，请看《预处理器》一章。</p>\n<h3 id=\"占位符\"><a class=\"anchor\" href=\"#占位符\">#</a> 占位符</h3>\n<p><code>printf()</code>  可以在输出文本中指定占位符。所谓 “占位符”，就是这个位置可以用其他值代入。</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 输出 There are 3 apples</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"There are %i apples\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>上面示例中， <code>There are %i apples\\n</code>  是输出文本，里面的 <code>%i</code>  就是占位符，表示这个位置要用其他值来替换。占位符的第一个字符一律为百分号 <code>%</code> ，第二个字符表示占位符的类型， <code>%i</code>  表示这里代入的值必须是一个整数。</p>\n<p><code>printf()</code>  的第二个参数就是替换占位符的值，上面的例子是整数 <code>3</code>  替换 <code>%i</code> 。执行后的输出结果就是 <code>There are 3 apples</code> 。</p>\n<p>常用的占位符除了 <code>%i</code> ，还有 <code>%s</code>  表示代入的是字符串。</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%s will come tonight\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Jane\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>上面示例中， <code>%s</code>  表示代入的是一个字符串，所以 <code>printf()</code>  的第二个参数就必须是字符串，这个例子是 <code>Jane</code> 。执行后的输出就是 <code>Jane will come tonight</code> 。</p>\n<p>输出文本里面可以使用多个占位符。</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%s says it is %i o'clock\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Ben\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">21</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>上面示例中，输出文本 <code>%s says it is %i o'clock</code>  有两个占位符，第一个是字符串占位符 <code>%s</code> ，第二个是整数占位符 <code>%i</code> ，分别对应 <code>printf()</code>  的第二个参数（ <code>Ben</code> ）和第三个参数（ <code>21</code> ）。执行后的输出就是 <code>Ben says it is 21 o'clock</code> 。</p>\n<p><code>printf()</code>  参数与占位符是一一对应关系，如果有 <code>n</code>  个占位符， <code>printf()</code>  的参数就应该有 <code>n + 1</code>  个。如果参数个数少于对应的占位符， <code>printf()</code>  可能会输出内存中的任意值。</p>\n<p><code>printf()</code>  的占位符有许多种类，与 C 语言的数据类型相对应。下面按照字母顺序，列出常用的占位符，方便查找，具体含义在后面章节介绍。</p>\n<ul>\n<li><code>%a</code> ：浮点数。</li>\n<li><code>%A</code> ：浮点数。</li>\n<li><code>%c</code> ：字符。</li>\n<li><code>%d</code> ：十进制整数。</li>\n<li><code>%e</code> ：使用科学计数法的浮点数，指数部分的 <code>e</code>  为小写。</li>\n<li><code>%E</code> ：使用科学计数法的浮点数，指数部分的 <code>E</code>  为大写。</li>\n<li><code>%i</code> ：整数，基本等同于 <code>%d</code> 。</li>\n<li><code>%f</code> ：小数（包含 <code>float</code>  类型和 <code>double</code>  类型）。</li>\n<li><code>%g</code> ：6 个有效数字的浮点数。整数部分一旦超过 6 位，就会自动转为科学计数法，指数部分的 <code>e</code>  为小写。</li>\n<li><code>%G</code> ：等同于 <code>%g</code> ，唯一的区别是指数部分的 <code>E</code>  为大写。</li>\n<li><code>%hd</code> ：十进制 short int 类型。</li>\n<li><code>%ho</code> ：八进制 short int 类型。</li>\n<li><code>%hx</code> ：十六进制 short int 类型。</li>\n<li><code>%hu</code> ：unsigned short int 类型。</li>\n<li><code>%ld</code> ：十进制 long int 类型。</li>\n<li><code>%lo</code> ：八进制 long int 类型。</li>\n<li><code>%lx</code> ：十六进制 long int 类型。</li>\n<li><code>%lu</code> ：unsigned long int 类型。</li>\n<li><code>%lld</code> ：十进制 long long int 类型。</li>\n<li><code>%llo</code> ：八进制 long long int 类型。</li>\n<li><code>%llx</code> ：十六进制 long long int 类型。</li>\n<li><code>%llu</code> ：unsigned long long int 类型。</li>\n<li><code>%Le</code> ：科学计数法表示的 long double 类型浮点数。</li>\n<li><code>%Lf</code> ：long double 类型浮点数。</li>\n<li><code>%n</code> ：已输出的字符串数量。该占位符本身不输出，只将值存储在指定变量之中。</li>\n<li><code>%o</code> ：八进制整数。</li>\n<li><code>%p</code> ：指针。</li>\n<li><code>%s</code> ：字符串。</li>\n<li><code>%u</code> ：无符号整数（unsigned int）。</li>\n<li><code>%x</code> ：十六进制整数。</li>\n<li><code>%zd</code> ： <code>size_t</code>  类型。</li>\n<li><code>%%</code> ：输出一个百分号。</li>\n</ul>\n<h3 id=\"输出格式\"><a class=\"anchor\" href=\"#输出格式\">#</a> 输出格式</h3>\n<p><code>printf()</code>  可以定制占位符的输出格式。</p>\n<p>（1）限定宽度</p>\n<p><code>printf()</code>  允许限定占位符的最小宽度。</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%5d\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">123</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 输出为 \"123\"</span></pre></td></tr></table></figure><p>上面示例中， <code>%5d</code>  表示这个占位符的宽度至少为 5 位。如果不满 5 位，对应的值的前面会添加空格。</p>\n<p>输出的值默认是右对齐，即输出内容前面会有空格；如果希望改成左对齐，在输出内容后面添加空格，可以在占位符的 <code>%</code>  的后面插入一个 <code>-</code>  号。</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%-5d\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">123</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 输出为 \"123\"</span></pre></td></tr></table></figure><p>上面示例中，输出内容 <code>123</code>  的后面添加了空格。</p>\n<p>对于小数，这个限定符会限制所有数字的最小显示宽度。</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 输出 \"123.450000\"</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%12f\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">123.45</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>上面示例中， <code>%12f</code>  表示输出的浮点数最少要占据 12 位。由于小数的默认显示精度是小数点后 6 位，所以 <code>123.45</code>  输出结果的头部会添加 2 个空格。</p>\n<p>（2）总是显示正负号</p>\n<p>默认情况下， <code>printf()</code>  不对正数显示 <code>+</code>  号，只对负数显示 <code>-</code>  号。如果想让正数也输出 <code>+</code>  号，可以在占位符的 <code>%</code>  后面加一个 <code>+</code> 。</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%+d\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">12</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 输出 +12</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%+d\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">12</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 输出 -12</span></pre></td></tr></table></figure><p>上面示例中， <code>%+d</code>  可以确保输出的数值，总是带有正负号。</p>\n<p>（3）限定小数位数</p>\n<p>输出小数时，有时希望限定小数的位数。举例来说，希望小数点后面只保留两位，占位符可以写成 <code>%.2f</code> 。</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 输出 Number is 0.50</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Number is %.2f\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>上面示例中，如果希望小数点后面输出 3 位（ <code>0.500</code> ），占位符就要写成 <code>%.3f</code> 。</p>\n<p>这种写法可以与限定宽度占位符，结合使用。</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 输出为 \"0.50\"</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%6.2f\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>上面示例中， <code>%6.2f</code>  表示输出字符串最小宽度为 6，小数位数为 2。所以，输出字符串的头部有两个空格。</p>\n<p>最小宽度和小数位数这两个限定值，都可以用 <code>*</code>  代替，通过 <code>printf()</code>  的参数传入。</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%*.*f\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">// 等同于</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%6.2f\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>上面示例中， <code>%*.*f</code>  的两个星号通过 <code>printf()</code>  的两个参数 <code>6</code>  和 <code>2</code>  传入。</p>\n<p>（4）输出部分字符串</p>\n<p><code>%s</code>  占位符用来输出字符串，默认是全部输出。如果只想输出开头的部分，可以用 <code>%.[m]s</code>  指定输出的长度，其中 <code>[m]</code>  代表一个数字，表示所要输出的长度。</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 输出 hello</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%.5s\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"hello world\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>上面示例中，占位符 <code>%.5s</code>  表示只输出字符串 “hello world” 的前 5 个字符，即 “hello”。</p>\n<h2 id=\"标准库头文件\"><a class=\"anchor\" href=\"#标准库头文件\">#</a> 标准库，头文件</h2>\n<p>程序需要用到的功能，不一定需要自己编写，C 语言可能已经自带了。程序员只要去调用这些自带的功能，就省得自己编写代码了。举例来说， <code>printf()</code>  这个函数就是 C 语言自带的，只要去调用它，就能实现在屏幕上输出内容。</p>\n<p>C 语言自带的所有这些功能，统称为 “标准库”（standard library），因为它们是写入标准的，到底包括哪些功能，应该怎么使用的，都是规定好的，这样才能保证代码的规范和可移植。</p>\n<p>不同的功能定义在不同的文件里面，这些文件统称为 “头文件”（header file）。如果系统自带某一个功能，就一定还会自带描述这个功能的头文件，比如 <code>printf()</code>  的头文件就是系统自带的 <code>stdio.h</code> 。头文件的后缀通常是 <code>.h</code> 。</p>\n<p>如果要使用某个功能，就必须先加载对应的头文件，加载使用的是 <code>#include</code>  命令。这就是为什么使用 <code>printf()</code>  之前，必须先加载 <code>stdio.h</code>  的原因。</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span></pre></td></tr></table></figure><p>注意，加载头文件的 <code>#include</code>  语句不需要分号结尾，详见《预处理器》一章。</p>\n",
            "tags": [
                "计算机科学",
                "编程语言",
                "C语言程序设计-阮一峰",
                "C语言",
                "教程"
            ]
        },
        {
            "id": "http://yoursite.com/computer-science/program-language/c/lesson-1/",
            "url": "http://yoursite.com/computer-science/program-language/c/lesson-1/",
            "title": "第01课 C语言概述",
            "date_published": "2021-10-01T12:46:48.000Z",
            "content_html": "<h1 id=\"c-语言简介\"><a class=\"anchor\" href=\"#c-语言简介\">#</a> C 语言简介</h1>\n<h2 id=\"历史\"><a class=\"anchor\" href=\"#历史\">#</a> 历史</h2>\n<p>C 语言最初是作为 Unix 系统的开发工具而发明的。</p>\n<p>1969 年，美国贝尔实验室的肯・汤普森（Ken Thompson）与丹尼斯・里奇（Dennis Ritchie）一起开发了 Unix 操作系统。Unix 是用汇编语言写的，无法移植到其他计算机，他们决定使用高级语言重写。但是，当时的高级语言无法满足他们的要求，汤普森就在 BCPL 语言的基础上发明了 B 语言。</p>\n<p>1972 年，丹尼斯・里奇和布莱恩・柯林汉（Brian Kernighan）又在 B 语言的基础上重新设计了一种新语言，这种新语言取代了 B 语言，所以称为 C 语言。</p>\n<p>1973 年，整个 Unix 系统都使用 C 语言重写。此后，这种语言开始快速流传，广泛用于各种操作系统和系统软件的开发。</p>\n<p>1988 年，美国国家标准协会（ANSI）正式将 C 语言标准化，标志着 C 语言开始稳定和规范化。</p>\n<p>几十年后的今天，C 语言依然是最广泛使用、最流行的系统编程语言之一，Unix 和 Linux 系统现在还是使用 C 语言开发。</p>\n<h2 id=\"c-语言的特点\"><a class=\"anchor\" href=\"#c-语言的特点\">#</a> C 语言的特点</h2>\n<p>C 语言能够长盛不衰、广泛应用，主要原因是它有一些鲜明的特点。</p>\n<p>（1）低级语言</p>\n<p>C 语言能够直接操作硬件、管理内存、跟操作系统对话，这使得它是一种非常接近底层的语言，也就是低级语言，非常适合写需要跟硬件交互、有极高性能要求的程序。</p>\n<p>（2）可移植性</p>\n<p>C 语言的原始设计目的，是将 Unix 系统移植到其他计算机架构。这使得它从一开始就非常注重可移植性，C 程序可以相对简单地移植到各种硬件架构和操作系统。</p>\n<p>除了计算机，C 语言现在还是嵌入式系统的首选编程语言，汽车、照相机、家用电器等设备的底层系统都是用 C 语言编程，这也是因为它良好的可移植性。</p>\n<p>（3）简单性</p>\n<p>C 语言的语法相对简单，语法规则不算太多，也几乎没有语法糖。一般来说，如果两个语法可以完成几乎相同的事情，C 语言就只会提供一种，这样大大减少了语言的复杂性。</p>\n<p>而且，C 语言的语法都是基础语法，不提供高级的数据结构，比如 C 语言没有 “类”（class），复杂的数据结构都需要自己构造。</p>\n<p>（4）灵活性</p>\n<p>C 语言对程序员的限制很少。它假设程序员知道自己在干嘛，不会限制你做各种危险的操作，你干什么都可以，后果也由自己负责。</p>\n<p>C 语言的哲学是 “信任程序员，不要妨碍他们做事”。比如，它让程序员自己管理内存，不提供内存自动清理功能。另外，也不提供类型检查、数组的负索引检查、指针位置的检查等保护措施。</p>\n<p>表面上看，这似乎很危险，但是对于高级程序员来说，却有了更大的编程自由。不过，这也使得 C 语言的 debug 不太容易。</p>\n<p>（5）总结</p>\n<p>上面这些特点，使得 C 语言可以写出性能非常强、完全发挥硬件潜力的程序，而且 C 语言的编译器实现难度相对较低。但是另一方面，C 语言代码容易出错，一般程序员不容易写好。</p>\n<p>此外，当代很多流行语言都是以 C 语言为基础，比如 C++、Java、C#、JavaScript 等等。学好 C 语言有助于对这些语言加深理解。</p>\n<h2 id=\"c-语言的版本\"><a class=\"anchor\" href=\"#c-语言的版本\">#</a> C 语言的版本</h2>\n<p>历史上，C 语言有过多个版本。</p>\n<p>（1）K＆R C</p>\n<p><code>K&amp;R C</code>  指的是 C 语言的原始版本。1978 年，C 语言的发明者丹尼斯・里奇（Dennis Ritchie）和布莱恩・柯林（Brian Kernighan）合写了一本著名的教材《C 编程语言》（The C programming language）。由于 C 语言还没有成文的语法标准，这本书就成了公认标准，以两位作者的姓氏首字母作为版本简称 “K&amp;R C”。</p>\n<p>（2）ANSI C（又称 C89 或 C90）</p>\n<p>C 语言的原始版本非常简单，对很多情况的描述非常模糊，加上 C 语法依然在快速发展，要求将 C 语言标准化的呼声越来越高。</p>\n<p>1989 年，美国国家标准协会（ANSI）制定了一套 C 语言标准。1990 年，国际标准化组织（ISO）通过了这个标准。它被称为 “ANSI C”，也可以按照发布年份，称为 “C89 或 C90”。</p>\n<p>（3）C95</p>\n<p>1995 年，美国国家标准协会对 1989 年的那个标准，进行了补充，加入多字节字符和宽字符的支持。这个版本称为 C95。</p>\n<p>（4）C99</p>\n<p>C 语言标准的第一次大型修订，发生在 1999 年，增加了许多语言特性，比如双斜杠（ <code>//</code> ）的注释语法。这个版本称为 C99，是目前最流行的 C 版本。</p>\n<p>（5）C11</p>\n<p>2011 年，标准化组织再一次对 C 语言进行修订，增加了 Unicode 和多线程的支持。这个版本称为 C11。</p>\n<p>（6）C17</p>\n<p>C11 标准在 2017 年进行了修补，但发布是在 2018 年。新版本只是解决了 C11 的一些缺陷，没有引入任何新功能。这个版本称为 C17。</p>\n<p>（7）C2x</p>\n<p>标准化组织正在讨论 C 语言的下一个版本，据说可能会在 2023 年通过，到时就会称为 C23。</p>\n<h2 id=\"c-语言的编译\"><a class=\"anchor\" href=\"#c-语言的编译\">#</a> C 语言的编译</h2>\n<p>C 语言是一种编译型语言，源码都是文本文件，本身无法执行。必须通过编译器，生成二进制的可执行文件，才能执行。编译器将代码从文本翻译成二进制指令的过程，就称为编译阶段，又称为 “编译时”（compile time），跟运行阶段（又称为 “运行时”）相区分。</p>\n<p>目前，最常见的 C 语言编译器是自由软件基金会推出的 GCC 编译器，它可以免费使用。本书也使用这个编译器。Linux 和 Mac 系统可以直接安装 GCC，Windows 系统可以安装 MinGW。但是，也可以不用这么麻烦，网上有在线编译器，能够直接在网页上模拟运行 C 代码，查看结果，下面就是两个这样的工具。</p>\n<ul>\n<li>CodingGround: <span class=\"exturl\" data-url=\"aHR0cHM6Ly90dXRvcmlhbHNwb2ludC5jb20vY29tcGlsZV9jX29ubGluZS5waHA=\">https://tutorialspoint.com/compile_c_online.php</span></li>\n<li>OnlineGDB: <span class=\"exturl\" data-url=\"aHR0cHM6Ly9vbmxpbmVnZGIuY29tL29ubGluZV9jX2NvbXBpbGVy\">https://onlinegdb.com/online_c_compiler</span></li>\n</ul>\n<p>本书的例子都使用 GCC 在命令行进行编译。</p>\n<h2 id=\"hello-world-示例\"><a class=\"anchor\" href=\"#hello-world-示例\">#</a> Hello World 示例</h2>\n<p>C 语言的源代码文件，通常以后缀名 <code>.c</code>  结尾。下面是一个简单的 C 程序 <code>hello.c</code> 。它就是一个普通的文本文件，任何文本编译器都能用来写。</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Hello World\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>上面这个程序的唯一作用，就是在屏幕上面显示 “Hello World”。</p>\n<p>这里不讲解这些代码是什么意思，只是作为一个例子，让大家看看 C 代码应该怎么编译和运行。假设你已经安装好了 GCC 编译器，可以打开命令行，执行下面的命令。</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>$ gcc hello.c</pre></td></tr></table></figure><p>上面命令使用 <code>gcc</code>  编译器，将源文件 <code>hello.c</code>  编译成二进制代码。注意， <code>$</code>  是命令行提示符，你真正需要输入的是 <code>$</code>  后面的部分。</p>\n<p>运行这个命令以后，默认会在当前目录下生成一个编译产物文件 <code>a.out</code> （assembler output 的缩写）。执行该文件，就会在屏幕上输出 <code>Hello World</code> 。</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>$ ./a.out</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>Hello World</pre></td></tr></table></figure><p>GCC 的 <code>-o</code>  参数可以指定编译产物的文件名。</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>$ gcc -o hello hello.c</pre></td></tr></table></figure><p>上面命令的 <code>-o hello</code>  指定，编译产物的文件名为 <code>hello</code> （取代 <code>a.out</code> ）。编译后就会生成一个名叫 <code>hello</code>  的可执行文件，相当于为 <code>a.out</code>  指定了名称。执行该文件，也会得到同样的结果。</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>$ ./hello</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>Hello World</pre></td></tr></table></figure><p>GCC 的 <code>-std=</code>  参数还可以指定按照哪个 C 语言的标准进行编译。</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>$ gcc -std<span class=\"token operator\">=</span>c99 hello.c</pre></td></tr></table></figure><p>上面命令指定按照 C99 标准进行编译。</p>\n",
            "tags": [
                "计算机科学",
                "编程语言",
                "C语言程序设计-阮一峰",
                "C语言",
                "教程"
            ]
        },
        {
            "id": "http://yoursite.com/hello-world/",
            "url": "http://yoursite.com/hello-world/",
            "title": "你来，我很高兴",
            "date_published": "2021-08-08T12:46:30.000Z",
            "content_html": "",
            "tags": [
                "随笔"
            ]
        }
    ]
}