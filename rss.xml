<?xml version="1.0"?>
<rss version="2.0">
    <channel>
        <title>李惠帅</title>
        <subtitle>This is my blog</subtitle>
        <icon>http://yoursite.com/images/favicon.ico</icon>
        <link>http://yoursite.com</link>
        <author>
          <name>Henry Lee</name>
        </author>
        <description>欢迎你来</description>
        <language>zh-CN</language>
        <pubDate>Mon, 04 Oct 2021 10:20:48 +0800</pubDate>
        <lastBuildDate>Mon, 04 Oct 2021 10:20:48 +0800</lastBuildDate>
        <category term="关键词1" />
        <category term="关键词2" />
        <item>
            <guid isPermalink="true">http://yoursite.com/philosophy/modern-philosophy/thought-notes/introduction/</guid>
            <title>导言 近现代哲学存在的意义</title>
            <link>http://yoursite.com/philosophy/modern-philosophy/thought-notes/introduction/</link>
            <category term="哲学" scheme="http://yoursite.com/categories/philosophy/" />
            <category term="近现代哲学" scheme="http://yoursite.com/categories/philosophy/modern-philosophy/" />
            <category term="西方现代思想讲义" scheme="http://yoursite.com/categories/philosophy/modern-philosophy/thought-notes/" />
            <category term="近现代" scheme="http://yoursite.com/tags/%E8%BF%91%E7%8E%B0%E4%BB%A3/" />
            <category term="哲学" scheme="http://yoursite.com/tags/%E5%93%B2%E5%AD%A6/" />
            <category term="读书笔记" scheme="http://yoursite.com/tags/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/" />
            <pubDate>Mon, 04 Oct 2021 10:20:48 +0800</pubDate>
            <description><![CDATA[  ]]></description>
        </item>
        <item>
            <guid isPermalink="true">http://yoursite.com/literature/ancient-literature/al-introduction/lesson1/</guid>
            <title>导论 中国古典文学组成</title>
            <link>http://yoursite.com/literature/ancient-literature/al-introduction/lesson1/</link>
            <category term="文学" scheme="http://yoursite.com/categories/literature/" />
            <category term="古典文学" scheme="http://yoursite.com/categories/literature/ancient-literature/" />
            <category term="中国古典文学概论" scheme="http://yoursite.com/categories/literature/ancient-literature/al-introduction/" />
            <category term="中国" scheme="http://yoursite.com/tags/%E4%B8%AD%E5%9B%BD/" />
            <category term="古典文学" scheme="http://yoursite.com/tags/%E5%8F%A4%E5%85%B8%E6%96%87%E5%AD%A6/" />
            <category term="文学史" scheme="http://yoursite.com/tags/%E6%96%87%E5%AD%A6%E5%8F%B2/" />
            <pubDate>Sat, 02 Oct 2021 10:20:48 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;中国古典文学组成&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#中国古典文学组成&#34;&gt;#&lt;/a&gt; 中国古典文学组成&lt;/h1&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">http://yoursite.com/literature/modern-literature/chinese-homl/lesson1/</guid>
            <title>第01课 现代小说起源</title>
            <link>http://yoursite.com/literature/modern-literature/chinese-homl/lesson1/</link>
            <category term="文学" scheme="http://yoursite.com/categories/literature/" />
            <category term="现代文学" scheme="http://yoursite.com/categories/literature/modern-literature/" />
            <category term="中国近现代文学史" scheme="http://yoursite.com/categories/literature/modern-literature/chinese-homl/" />
            <category term="中国" scheme="http://yoursite.com/tags/%E4%B8%AD%E5%9B%BD/" />
            <category term="文学史" scheme="http://yoursite.com/tags/%E6%96%87%E5%AD%A6%E5%8F%B2/" />
            <category term="近现代" scheme="http://yoursite.com/tags/%E8%BF%91%E7%8E%B0%E4%BB%A3/" />
            <pubDate>Sat, 02 Oct 2021 10:20:48 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;现代小说起源&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#现代小说起源&#34;&gt;#&lt;/a&gt; 现代小说起源&lt;/h1&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">http://yoursite.com/computer-science/program-language/c/lesson-2/</guid>
            <title>第02课 C语言基本语法</title>
            <link>http://yoursite.com/computer-science/program-language/c/lesson-2/</link>
            <category term="计算机科学" scheme="http://yoursite.com/categories/computer-science/" />
            <category term="编程语言" scheme="http://yoursite.com/categories/computer-science/program-language/" />
            <category term="C语言程序设计-阮一峰" scheme="http://yoursite.com/categories/computer-science/program-language/c/" />
            <category term="C语言" scheme="http://yoursite.com/tags/C%E8%AF%AD%E8%A8%80/" />
            <category term="教程" scheme="http://yoursite.com/tags/%E6%95%99%E7%A8%8B/" />
            <pubDate>Fri, 01 Oct 2021 21:20:48 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;c-语言基本语法&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#c-语言基本语法&#34;&gt;#&lt;/a&gt; C 语言基本语法&lt;/h1&gt;
&lt;h2 id=&#34;语句&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#语句&#34;&gt;#&lt;/a&gt; 语句&lt;/h2&gt;
&lt;p&gt;C 语言的代码由一行行语句（statement）组成。语句就是程序执行的一个操作命令。C 语言规定，语句必须使用分号结尾，除非有明确规定可以不写分号。&lt;/p&gt;
&lt;figure class=&#34;highlight c&#34;&gt;&lt;figcaption data-lang=&#34;c&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt; x &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;上面就是一个变量声明语句，声明整数变量 &lt;code&gt;x&lt;/code&gt; ，并且将值设为 &lt;code&gt;1&lt;/code&gt; 。&lt;/p&gt;
&lt;p&gt;多个语句可以写在一行。&lt;/p&gt;
&lt;figure class=&#34;highlight c&#34;&gt;&lt;figcaption data-lang=&#34;c&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt; x&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt; x &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;上面示例是两个语句写在一行。所以，语句之间的换行符并不是必需的，只是为了方便阅读代码。&lt;/p&gt;
&lt;p&gt;一个语句也可以写成多行，这时就要依靠分号判断语句在哪一行结束。&lt;/p&gt;
&lt;figure class=&#34;highlight c&#34;&gt;&lt;figcaption data-lang=&#34;c&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt; x&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;x&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;上面示例中，第二个语句 &lt;code&gt;x = 1;&lt;/code&gt;  被拆成了四行。编译器会自动忽略代码里面的换行。&lt;/p&gt;
&lt;p&gt;单个分号也是有效语句，称为 “空语句”，虽然毫无作用。&lt;/p&gt;
&lt;figure class=&#34;highlight c&#34;&gt;&lt;figcaption data-lang=&#34;c&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h2 id=&#34;表达式&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#表达式&#34;&gt;#&lt;/a&gt; 表达式&lt;/h2&gt;
&lt;p&gt;C 语言的各种计算，主要通过表达式完成。表达式（expression）是一个计算式，用来获取值。&lt;/p&gt;
&lt;figure class=&#34;highlight c&#34;&gt;&lt;figcaption data-lang=&#34;c&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;2&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;上面代码就是一个表达式，用来获取 &lt;code&gt;1 + 2&lt;/code&gt;  这个算术计算的结果。&lt;/p&gt;
&lt;p&gt;表达式加上分号，也可以成为语句，但是没有实际的作用。&lt;/p&gt;
&lt;figure class=&#34;highlight c&#34;&gt;&lt;figcaption data-lang=&#34;c&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token number&#34;&gt;8&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token number&#34;&gt;3&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;上面示例是两个表达式，加上分号以后成为语句。&lt;/p&gt;
&lt;p&gt;表达式与语句的区别主要是两点：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;语句可以包含表达式，但是表达式本身不构成语句。&lt;/li&gt;
&lt;li&gt;表达式都有返回值，语句不一定有。因为语句用来执行某个命令，很多时候不需要返回值，比如变量声明语句（ &lt;code&gt;int x = 1&lt;/code&gt; ）就没有返回值。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;语句块&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#语句块&#34;&gt;#&lt;/a&gt; 语句块&lt;/h2&gt;
&lt;p&gt;C 语言允许多个语句使用一对大括号 &lt;code&gt;&amp;#123;&amp;#125;&lt;/code&gt; ，组成一个块，也称为复合语句（compounded statement）。在语法上，语句块可以视为多个语句组成的一个复合语句。&lt;/p&gt;
&lt;figure class=&#34;highlight c&#34;&gt;&lt;figcaption data-lang=&#34;c&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt; x&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  x &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;上面示例中，大括号形成了一个语句块。&lt;/p&gt;
&lt;p&gt;大括号的结尾不需要添加分号。&lt;/p&gt;
&lt;h2 id=&#34;空格&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#空格&#34;&gt;#&lt;/a&gt; 空格&lt;/h2&gt;
&lt;p&gt;C 语言里面的空格，主要用来帮助编译器区分语法单位。如果语法单位不用空格就能区分，空格就不是必须的，只是为了增加代码的可读性。&lt;/p&gt;
&lt;figure class=&#34;highlight c&#34;&gt;&lt;figcaption data-lang=&#34;c&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt; x &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;// 等同于&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt; x&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;上面示例中，赋值号（ &lt;code&gt;=&lt;/code&gt; ）前后有没有空格都可以，因为编译器这里不借助空格，就能区分语法单位。&lt;/p&gt;
&lt;p&gt;语法单位之间的多个空格，等同于单个空格。&lt;/p&gt;
&lt;figure class=&#34;highlight c&#34;&gt;&lt;figcaption data-lang=&#34;c&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt;    x &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;     &lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;上面示例中，各个语法单位之间的多个空格，跟单个空格的效果是一样的。&lt;/p&gt;
&lt;p&gt;空格还用来表示缩进。多层级的代码有没有缩进，其实对于编译器来说并没有差别，没有缩进的代码也是完全可以运行的。强调代码缩进，只是为了增强代码可读性，便于区分代码块。&lt;/p&gt;
&lt;p&gt;大多数 C 语言的风格要求是，下一级代码比上一级缩进 4 个空格。为了书写的紧凑，本书采用缩写两个空格。&lt;/p&gt;
&lt;figure class=&#34;highlight c&#34;&gt;&lt;figcaption data-lang=&#34;c&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;// 缩进四个空格&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;x &lt;span class=&#34;token operator&#34;&gt;&gt;&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token function&#34;&gt;printf&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;positive\n&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;// 缩进两个空格&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;x &lt;span class=&#34;token operator&#34;&gt;&gt;&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token function&#34;&gt;printf&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;positive\n&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;只包含空格的行被称为空白行，编译器会完全忽略该行。&lt;/p&gt;
&lt;h2 id=&#34;注释&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#注释&#34;&gt;#&lt;/a&gt; 注释&lt;/h2&gt;
&lt;p&gt;注释是对代码的说明，编译器会忽略注释，也就是说，注释对实际代码没有影响。&lt;/p&gt;
&lt;p&gt;C 语言的注释有两种表示方法。第一种方法是将注释放在 &lt;code&gt;/*...*/&lt;/code&gt;  之间，内部可以分行。&lt;/p&gt;
&lt;figure class=&#34;highlight c&#34;&gt;&lt;figcaption data-lang=&#34;c&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;/* 注释 */&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;/*&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  这是一行注释&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;*/&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;这种注释可以插在行内。&lt;/p&gt;
&lt;figure class=&#34;highlight c&#34;&gt;&lt;figcaption data-lang=&#34;c&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;open&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;char&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;*&lt;/span&gt; s &lt;span class=&#34;token comment&#34;&gt;/* file name */&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt; mode&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;上面示例中， &lt;code&gt;/* file name */&lt;/code&gt;  用来对函数参数进行说明，跟在它后面的代码依然会有效执行。&lt;/p&gt;
&lt;p&gt;这种注释一定不能忘记写结束符号 &lt;code&gt;*/&lt;/code&gt; ，否则很容易导致错误。&lt;/p&gt;
&lt;figure class=&#34;highlight c&#34;&gt;&lt;figcaption data-lang=&#34;c&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;printf&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;a &#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;/* 注释一&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;printf (&#34;b&#34;);&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;printf (&#34;c&#34;); /* 注释二 */&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;printf&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;d &#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;上面示例的原意是，第一行和第三行代码的尾部，有两个注释。但是，第一行注释忘记写结束符号，导致注释一延续到第三行结束。&lt;/p&gt;
&lt;p&gt;第二种写法是将注释放在双斜杠 &lt;code&gt;//&lt;/code&gt;  后面，从双斜杠到行尾都属于注释。这种注释只能是单行，可以放在行首，也可以放在一行语句的结尾。这是 C99 标准新增的语法。&lt;/p&gt;
&lt;figure class=&#34;highlight c&#34;&gt;&lt;figcaption data-lang=&#34;c&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;// 这是一行注释&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt; x &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;// 这也是注释&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;不管是哪一种注释，都不能放在双引号里面。双引号里面的注释符号，会成为字符串的一部分，解释为普通符号，失去注释作用。&lt;/p&gt;
&lt;figure class=&#34;highlight c&#34;&gt;&lt;figcaption data-lang=&#34;c&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;printf&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;// hello /* world */ &#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;上面示例中，双引号里面的注释符号，都会被视为普通字符，没有注释作用。&lt;/p&gt;
&lt;p&gt;编译时，注释会被替换成一个空格，所以 &lt;code&gt;min/* space */Value&lt;/code&gt;  会变成 &lt;code&gt;min Value&lt;/code&gt; ，而不是 &lt;code&gt;minValue&lt;/code&gt; 。&lt;/p&gt;
&lt;h2 id=&#34;printf&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#printf&#34;&gt;#&lt;/a&gt; printf()&lt;/h2&gt;
&lt;h3 id=&#34;基本用法&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#基本用法&#34;&gt;#&lt;/a&gt; 基本用法&lt;/h3&gt;
&lt;p&gt;本书的示例会大量用到 &lt;code&gt;printf()&lt;/code&gt;  函数，这里先介绍一下这个函数。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;printf()&lt;/code&gt;  的作用是将参数文本输出到屏幕。它名字里面的 &lt;code&gt;f&lt;/code&gt;  代表 &lt;code&gt;format&lt;/code&gt; （格式化），表示可以定制输出文本的格式。&lt;/p&gt;
&lt;figure class=&#34;highlight c&#34;&gt;&lt;figcaption data-lang=&#34;c&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;printf&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;Hello World&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;上面命令会在屏幕上输出一行文字 “Hello World”。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;printf()&lt;/code&gt;  不会在行尾自动添加换行符，运行结束后，光标就停留在输出结束的地方，不会自动换行。为了让光标移到下一行的开头，可以在输出文本的结尾，添加一个换行符 &lt;code&gt;\n&lt;/code&gt; 。&lt;/p&gt;
&lt;figure class=&#34;highlight c&#34;&gt;&lt;figcaption data-lang=&#34;c&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;printf&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;Hello World\n&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;如果文本内部有换行，也是通过插入换行符来实现。&lt;/p&gt;
&lt;figure class=&#34;highlight c&#34;&gt;&lt;figcaption data-lang=&#34;c&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;printf&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;Hello\nWorld\n&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;上面示例先输出一个 &lt;code&gt;Hello&lt;/code&gt; ，然后换行，在下一行开头输出 &lt;code&gt;World&lt;/code&gt; ，然后又是一个换行。&lt;/p&gt;
&lt;p&gt;上面示例也可以写成两个 &lt;code&gt;printf()&lt;/code&gt; ，效果完全一样。&lt;/p&gt;
&lt;figure class=&#34;highlight c&#34;&gt;&lt;figcaption data-lang=&#34;c&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;printf&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;Hello\n&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;printf&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;World\n&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;&lt;code&gt;printf()&lt;/code&gt;  是在标准库的头文件 &lt;code&gt;stdio.h&lt;/code&gt;  定义的。使用这个函数之前，必须在源码文件头部引入这个头文件。&lt;/p&gt;
&lt;figure class=&#34;highlight c&#34;&gt;&lt;figcaption data-lang=&#34;c&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token macro property&#34;&gt;&lt;span class=&#34;token directive-hash&#34;&gt;#&lt;/span&gt;&lt;span class=&#34;token directive keyword&#34;&gt;include&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&amp;lt;stdio.h&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;void&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token function&#34;&gt;printf&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;Hello World\n&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;上面示例中，只有在源码头部加上 &lt;code&gt;#include &amp;lt;stdio.h&amp;gt;&lt;/code&gt; ，才能使用 &lt;code&gt;printf()&lt;/code&gt;  这个函数。 &lt;code&gt;#include&lt;/code&gt;  指令的详细解释，请看《预处理器》一章。&lt;/p&gt;
&lt;h3 id=&#34;占位符&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#占位符&#34;&gt;#&lt;/a&gt; 占位符&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;printf()&lt;/code&gt;  可以在输出文本中指定占位符。所谓 “占位符”，就是这个位置可以用其他值代入。&lt;/p&gt;
&lt;figure class=&#34;highlight c&#34;&gt;&lt;figcaption data-lang=&#34;c&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;// 输出 There are 3 apples&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;printf&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;There are %i apples\n&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;上面示例中， &lt;code&gt;There are %i apples\n&lt;/code&gt;  是输出文本，里面的 &lt;code&gt;%i&lt;/code&gt;  就是占位符，表示这个位置要用其他值来替换。占位符的第一个字符一律为百分号 &lt;code&gt;%&lt;/code&gt; ，第二个字符表示占位符的类型， &lt;code&gt;%i&lt;/code&gt;  表示这里代入的值必须是一个整数。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;printf()&lt;/code&gt;  的第二个参数就是替换占位符的值，上面的例子是整数 &lt;code&gt;3&lt;/code&gt;  替换 &lt;code&gt;%i&lt;/code&gt; 。执行后的输出结果就是 &lt;code&gt;There are 3 apples&lt;/code&gt; 。&lt;/p&gt;
&lt;p&gt;常用的占位符除了 &lt;code&gt;%i&lt;/code&gt; ，还有 &lt;code&gt;%s&lt;/code&gt;  表示代入的是字符串。&lt;/p&gt;
&lt;figure class=&#34;highlight c&#34;&gt;&lt;figcaption data-lang=&#34;c&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;printf&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;%s will come tonight\n&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;Jane&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;上面示例中， &lt;code&gt;%s&lt;/code&gt;  表示代入的是一个字符串，所以 &lt;code&gt;printf()&lt;/code&gt;  的第二个参数就必须是字符串，这个例子是 &lt;code&gt;Jane&lt;/code&gt; 。执行后的输出就是 &lt;code&gt;Jane will come tonight&lt;/code&gt; 。&lt;/p&gt;
&lt;p&gt;输出文本里面可以使用多个占位符。&lt;/p&gt;
&lt;figure class=&#34;highlight c&#34;&gt;&lt;figcaption data-lang=&#34;c&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;printf&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;%s says it is %i o&#39;clock\n&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;Ben&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;21&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;上面示例中，输出文本 &lt;code&gt;%s says it is %i o&#39;clock&lt;/code&gt;  有两个占位符，第一个是字符串占位符 &lt;code&gt;%s&lt;/code&gt; ，第二个是整数占位符 &lt;code&gt;%i&lt;/code&gt; ，分别对应 &lt;code&gt;printf()&lt;/code&gt;  的第二个参数（ &lt;code&gt;Ben&lt;/code&gt; ）和第三个参数（ &lt;code&gt;21&lt;/code&gt; ）。执行后的输出就是 &lt;code&gt;Ben says it is 21 o&#39;clock&lt;/code&gt; 。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;printf()&lt;/code&gt;  参数与占位符是一一对应关系，如果有 &lt;code&gt;n&lt;/code&gt;  个占位符， &lt;code&gt;printf()&lt;/code&gt;  的参数就应该有 &lt;code&gt;n + 1&lt;/code&gt;  个。如果参数个数少于对应的占位符， &lt;code&gt;printf()&lt;/code&gt;  可能会输出内存中的任意值。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;printf()&lt;/code&gt;  的占位符有许多种类，与 C 语言的数据类型相对应。下面按照字母顺序，列出常用的占位符，方便查找，具体含义在后面章节介绍。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;%a&lt;/code&gt; ：浮点数。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;%A&lt;/code&gt; ：浮点数。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;%c&lt;/code&gt; ：字符。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;%d&lt;/code&gt; ：十进制整数。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;%e&lt;/code&gt; ：使用科学计数法的浮点数，指数部分的 &lt;code&gt;e&lt;/code&gt;  为小写。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;%E&lt;/code&gt; ：使用科学计数法的浮点数，指数部分的 &lt;code&gt;E&lt;/code&gt;  为大写。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;%i&lt;/code&gt; ：整数，基本等同于 &lt;code&gt;%d&lt;/code&gt; 。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;%f&lt;/code&gt; ：小数（包含 &lt;code&gt;float&lt;/code&gt;  类型和 &lt;code&gt;double&lt;/code&gt;  类型）。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;%g&lt;/code&gt; ：6 个有效数字的浮点数。整数部分一旦超过 6 位，就会自动转为科学计数法，指数部分的 &lt;code&gt;e&lt;/code&gt;  为小写。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;%G&lt;/code&gt; ：等同于 &lt;code&gt;%g&lt;/code&gt; ，唯一的区别是指数部分的 &lt;code&gt;E&lt;/code&gt;  为大写。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;%hd&lt;/code&gt; ：十进制 short int 类型。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;%ho&lt;/code&gt; ：八进制 short int 类型。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;%hx&lt;/code&gt; ：十六进制 short int 类型。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;%hu&lt;/code&gt; ：unsigned short int 类型。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;%ld&lt;/code&gt; ：十进制 long int 类型。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;%lo&lt;/code&gt; ：八进制 long int 类型。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;%lx&lt;/code&gt; ：十六进制 long int 类型。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;%lu&lt;/code&gt; ：unsigned long int 类型。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;%lld&lt;/code&gt; ：十进制 long long int 类型。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;%llo&lt;/code&gt; ：八进制 long long int 类型。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;%llx&lt;/code&gt; ：十六进制 long long int 类型。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;%llu&lt;/code&gt; ：unsigned long long int 类型。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;%Le&lt;/code&gt; ：科学计数法表示的 long double 类型浮点数。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;%Lf&lt;/code&gt; ：long double 类型浮点数。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;%n&lt;/code&gt; ：已输出的字符串数量。该占位符本身不输出，只将值存储在指定变量之中。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;%o&lt;/code&gt; ：八进制整数。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;%p&lt;/code&gt; ：指针。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;%s&lt;/code&gt; ：字符串。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;%u&lt;/code&gt; ：无符号整数（unsigned int）。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;%x&lt;/code&gt; ：十六进制整数。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;%zd&lt;/code&gt; ： &lt;code&gt;size_t&lt;/code&gt;  类型。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;%%&lt;/code&gt; ：输出一个百分号。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;输出格式&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#输出格式&#34;&gt;#&lt;/a&gt; 输出格式&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;printf()&lt;/code&gt;  可以定制占位符的输出格式。&lt;/p&gt;
&lt;p&gt;（1）限定宽度&lt;/p&gt;
&lt;p&gt;&lt;code&gt;printf()&lt;/code&gt;  允许限定占位符的最小宽度。&lt;/p&gt;
&lt;figure class=&#34;highlight c&#34;&gt;&lt;figcaption data-lang=&#34;c&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;printf&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;%5d\n&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;123&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;// 输出为 &#34;123&#34;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;上面示例中， &lt;code&gt;%5d&lt;/code&gt;  表示这个占位符的宽度至少为 5 位。如果不满 5 位，对应的值的前面会添加空格。&lt;/p&gt;
&lt;p&gt;输出的值默认是右对齐，即输出内容前面会有空格；如果希望改成左对齐，在输出内容后面添加空格，可以在占位符的 &lt;code&gt;%&lt;/code&gt;  的后面插入一个 &lt;code&gt;-&lt;/code&gt;  号。&lt;/p&gt;
&lt;figure class=&#34;highlight c&#34;&gt;&lt;figcaption data-lang=&#34;c&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;printf&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;%-5d\n&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;123&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;// 输出为 &#34;123&#34;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;上面示例中，输出内容 &lt;code&gt;123&lt;/code&gt;  的后面添加了空格。&lt;/p&gt;
&lt;p&gt;对于小数，这个限定符会限制所有数字的最小显示宽度。&lt;/p&gt;
&lt;figure class=&#34;highlight c&#34;&gt;&lt;figcaption data-lang=&#34;c&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;// 输出 &#34;123.450000&#34;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;printf&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;%12f\n&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;123.45&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;上面示例中， &lt;code&gt;%12f&lt;/code&gt;  表示输出的浮点数最少要占据 12 位。由于小数的默认显示精度是小数点后 6 位，所以 &lt;code&gt;123.45&lt;/code&gt;  输出结果的头部会添加 2 个空格。&lt;/p&gt;
&lt;p&gt;（2）总是显示正负号&lt;/p&gt;
&lt;p&gt;默认情况下， &lt;code&gt;printf()&lt;/code&gt;  不对正数显示 &lt;code&gt;+&lt;/code&gt;  号，只对负数显示 &lt;code&gt;-&lt;/code&gt;  号。如果想让正数也输出 &lt;code&gt;+&lt;/code&gt;  号，可以在占位符的 &lt;code&gt;%&lt;/code&gt;  后面加一个 &lt;code&gt;+&lt;/code&gt; 。&lt;/p&gt;
&lt;figure class=&#34;highlight c&#34;&gt;&lt;figcaption data-lang=&#34;c&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;printf&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;%+d\n&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;12&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;// 输出 +12&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;printf&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;%+d\n&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;12&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;// 输出 -12&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;上面示例中， &lt;code&gt;%+d&lt;/code&gt;  可以确保输出的数值，总是带有正负号。&lt;/p&gt;
&lt;p&gt;（3）限定小数位数&lt;/p&gt;
&lt;p&gt;输出小数时，有时希望限定小数的位数。举例来说，希望小数点后面只保留两位，占位符可以写成 &lt;code&gt;%.2f&lt;/code&gt; 。&lt;/p&gt;
&lt;figure class=&#34;highlight c&#34;&gt;&lt;figcaption data-lang=&#34;c&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;// 输出 Number is 0.50&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;printf&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;Number is %.2f\n&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;0.5&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;上面示例中，如果希望小数点后面输出 3 位（ &lt;code&gt;0.500&lt;/code&gt; ），占位符就要写成 &lt;code&gt;%.3f&lt;/code&gt; 。&lt;/p&gt;
&lt;p&gt;这种写法可以与限定宽度占位符，结合使用。&lt;/p&gt;
&lt;figure class=&#34;highlight c&#34;&gt;&lt;figcaption data-lang=&#34;c&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;// 输出为 &#34;0.50&#34;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;printf&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;%6.2f\n&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;0.5&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;上面示例中， &lt;code&gt;%6.2f&lt;/code&gt;  表示输出字符串最小宽度为 6，小数位数为 2。所以，输出字符串的头部有两个空格。&lt;/p&gt;
&lt;p&gt;最小宽度和小数位数这两个限定值，都可以用 &lt;code&gt;*&lt;/code&gt;  代替，通过 &lt;code&gt;printf()&lt;/code&gt;  的参数传入。&lt;/p&gt;
&lt;figure class=&#34;highlight c&#34;&gt;&lt;figcaption data-lang=&#34;c&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;printf&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;%*.*f\n&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;6&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;0.5&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;// 等同于&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;printf&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;%6.2f\n&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;0.5&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;上面示例中， &lt;code&gt;%*.*f&lt;/code&gt;  的两个星号通过 &lt;code&gt;printf()&lt;/code&gt;  的两个参数 &lt;code&gt;6&lt;/code&gt;  和 &lt;code&gt;2&lt;/code&gt;  传入。&lt;/p&gt;
&lt;p&gt;（4）输出部分字符串&lt;/p&gt;
&lt;p&gt;&lt;code&gt;%s&lt;/code&gt;  占位符用来输出字符串，默认是全部输出。如果只想输出开头的部分，可以用 &lt;code&gt;%.[m]s&lt;/code&gt;  指定输出的长度，其中 &lt;code&gt;[m]&lt;/code&gt;  代表一个数字，表示所要输出的长度。&lt;/p&gt;
&lt;figure class=&#34;highlight c&#34;&gt;&lt;figcaption data-lang=&#34;c&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;// 输出 hello&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;printf&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;%.5s\n&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;hello world&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;上面示例中，占位符 &lt;code&gt;%.5s&lt;/code&gt;  表示只输出字符串 “hello world” 的前 5 个字符，即 “hello”。&lt;/p&gt;
&lt;h2 id=&#34;标准库头文件&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#标准库头文件&#34;&gt;#&lt;/a&gt; 标准库，头文件&lt;/h2&gt;
&lt;p&gt;程序需要用到的功能，不一定需要自己编写，C 语言可能已经自带了。程序员只要去调用这些自带的功能，就省得自己编写代码了。举例来说， &lt;code&gt;printf()&lt;/code&gt;  这个函数就是 C 语言自带的，只要去调用它，就能实现在屏幕上输出内容。&lt;/p&gt;
&lt;p&gt;C 语言自带的所有这些功能，统称为 “标准库”（standard library），因为它们是写入标准的，到底包括哪些功能，应该怎么使用的，都是规定好的，这样才能保证代码的规范和可移植。&lt;/p&gt;
&lt;p&gt;不同的功能定义在不同的文件里面，这些文件统称为 “头文件”（header file）。如果系统自带某一个功能，就一定还会自带描述这个功能的头文件，比如 &lt;code&gt;printf()&lt;/code&gt;  的头文件就是系统自带的 &lt;code&gt;stdio.h&lt;/code&gt; 。头文件的后缀通常是 &lt;code&gt;.h&lt;/code&gt; 。&lt;/p&gt;
&lt;p&gt;如果要使用某个功能，就必须先加载对应的头文件，加载使用的是 &lt;code&gt;#include&lt;/code&gt;  命令。这就是为什么使用 &lt;code&gt;printf()&lt;/code&gt;  之前，必须先加载 &lt;code&gt;stdio.h&lt;/code&gt;  的原因。&lt;/p&gt;
&lt;figure class=&#34;highlight c&#34;&gt;&lt;figcaption data-lang=&#34;c&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token macro property&#34;&gt;&lt;span class=&#34;token directive-hash&#34;&gt;#&lt;/span&gt;&lt;span class=&#34;token directive keyword&#34;&gt;include&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&amp;lt;stdio.h&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;注意，加载头文件的 &lt;code&gt;#include&lt;/code&gt;  语句不需要分号结尾，详见《预处理器》一章。&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">http://yoursite.com/computer-science/program-language/c/lesson-1/</guid>
            <title>第01课 C语言概述</title>
            <link>http://yoursite.com/computer-science/program-language/c/lesson-1/</link>
            <category term="计算机科学" scheme="http://yoursite.com/categories/computer-science/" />
            <category term="编程语言" scheme="http://yoursite.com/categories/computer-science/program-language/" />
            <category term="C语言程序设计-阮一峰" scheme="http://yoursite.com/categories/computer-science/program-language/c/" />
            <category term="C语言" scheme="http://yoursite.com/tags/C%E8%AF%AD%E8%A8%80/" />
            <category term="教程" scheme="http://yoursite.com/tags/%E6%95%99%E7%A8%8B/" />
            <pubDate>Fri, 01 Oct 2021 20:46:48 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;c-语言简介&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#c-语言简介&#34;&gt;#&lt;/a&gt; C 语言简介&lt;/h1&gt;
&lt;h2 id=&#34;历史&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#历史&#34;&gt;#&lt;/a&gt; 历史&lt;/h2&gt;
&lt;p&gt;C 语言最初是作为 Unix 系统的开发工具而发明的。&lt;/p&gt;
&lt;p&gt;1969 年，美国贝尔实验室的肯・汤普森（Ken Thompson）与丹尼斯・里奇（Dennis Ritchie）一起开发了 Unix 操作系统。Unix 是用汇编语言写的，无法移植到其他计算机，他们决定使用高级语言重写。但是，当时的高级语言无法满足他们的要求，汤普森就在 BCPL 语言的基础上发明了 B 语言。&lt;/p&gt;
&lt;p&gt;1972 年，丹尼斯・里奇和布莱恩・柯林汉（Brian Kernighan）又在 B 语言的基础上重新设计了一种新语言，这种新语言取代了 B 语言，所以称为 C 语言。&lt;/p&gt;
&lt;p&gt;1973 年，整个 Unix 系统都使用 C 语言重写。此后，这种语言开始快速流传，广泛用于各种操作系统和系统软件的开发。&lt;/p&gt;
&lt;p&gt;1988 年，美国国家标准协会（ANSI）正式将 C 语言标准化，标志着 C 语言开始稳定和规范化。&lt;/p&gt;
&lt;p&gt;几十年后的今天，C 语言依然是最广泛使用、最流行的系统编程语言之一，Unix 和 Linux 系统现在还是使用 C 语言开发。&lt;/p&gt;
&lt;h2 id=&#34;c-语言的特点&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#c-语言的特点&#34;&gt;#&lt;/a&gt; C 语言的特点&lt;/h2&gt;
&lt;p&gt;C 语言能够长盛不衰、广泛应用，主要原因是它有一些鲜明的特点。&lt;/p&gt;
&lt;p&gt;（1）低级语言&lt;/p&gt;
&lt;p&gt;C 语言能够直接操作硬件、管理内存、跟操作系统对话，这使得它是一种非常接近底层的语言，也就是低级语言，非常适合写需要跟硬件交互、有极高性能要求的程序。&lt;/p&gt;
&lt;p&gt;（2）可移植性&lt;/p&gt;
&lt;p&gt;C 语言的原始设计目的，是将 Unix 系统移植到其他计算机架构。这使得它从一开始就非常注重可移植性，C 程序可以相对简单地移植到各种硬件架构和操作系统。&lt;/p&gt;
&lt;p&gt;除了计算机，C 语言现在还是嵌入式系统的首选编程语言，汽车、照相机、家用电器等设备的底层系统都是用 C 语言编程，这也是因为它良好的可移植性。&lt;/p&gt;
&lt;p&gt;（3）简单性&lt;/p&gt;
&lt;p&gt;C 语言的语法相对简单，语法规则不算太多，也几乎没有语法糖。一般来说，如果两个语法可以完成几乎相同的事情，C 语言就只会提供一种，这样大大减少了语言的复杂性。&lt;/p&gt;
&lt;p&gt;而且，C 语言的语法都是基础语法，不提供高级的数据结构，比如 C 语言没有 “类”（class），复杂的数据结构都需要自己构造。&lt;/p&gt;
&lt;p&gt;（4）灵活性&lt;/p&gt;
&lt;p&gt;C 语言对程序员的限制很少。它假设程序员知道自己在干嘛，不会限制你做各种危险的操作，你干什么都可以，后果也由自己负责。&lt;/p&gt;
&lt;p&gt;C 语言的哲学是 “信任程序员，不要妨碍他们做事”。比如，它让程序员自己管理内存，不提供内存自动清理功能。另外，也不提供类型检查、数组的负索引检查、指针位置的检查等保护措施。&lt;/p&gt;
&lt;p&gt;表面上看，这似乎很危险，但是对于高级程序员来说，却有了更大的编程自由。不过，这也使得 C 语言的 debug 不太容易。&lt;/p&gt;
&lt;p&gt;（5）总结&lt;/p&gt;
&lt;p&gt;上面这些特点，使得 C 语言可以写出性能非常强、完全发挥硬件潜力的程序，而且 C 语言的编译器实现难度相对较低。但是另一方面，C 语言代码容易出错，一般程序员不容易写好。&lt;/p&gt;
&lt;p&gt;此外，当代很多流行语言都是以 C 语言为基础，比如 C++、Java、C#、JavaScript 等等。学好 C 语言有助于对这些语言加深理解。&lt;/p&gt;
&lt;h2 id=&#34;c-语言的版本&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#c-语言的版本&#34;&gt;#&lt;/a&gt; C 语言的版本&lt;/h2&gt;
&lt;p&gt;历史上，C 语言有过多个版本。&lt;/p&gt;
&lt;p&gt;（1）K＆R C&lt;/p&gt;
&lt;p&gt;&lt;code&gt;K&amp;amp;R C&lt;/code&gt;  指的是 C 语言的原始版本。1978 年，C 语言的发明者丹尼斯・里奇（Dennis Ritchie）和布莱恩・柯林（Brian Kernighan）合写了一本著名的教材《C 编程语言》（The C programming language）。由于 C 语言还没有成文的语法标准，这本书就成了公认标准，以两位作者的姓氏首字母作为版本简称 “K&amp;amp;R C”。&lt;/p&gt;
&lt;p&gt;（2）ANSI C（又称 C89 或 C90）&lt;/p&gt;
&lt;p&gt;C 语言的原始版本非常简单，对很多情况的描述非常模糊，加上 C 语法依然在快速发展，要求将 C 语言标准化的呼声越来越高。&lt;/p&gt;
&lt;p&gt;1989 年，美国国家标准协会（ANSI）制定了一套 C 语言标准。1990 年，国际标准化组织（ISO）通过了这个标准。它被称为 “ANSI C”，也可以按照发布年份，称为 “C89 或 C90”。&lt;/p&gt;
&lt;p&gt;（3）C95&lt;/p&gt;
&lt;p&gt;1995 年，美国国家标准协会对 1989 年的那个标准，进行了补充，加入多字节字符和宽字符的支持。这个版本称为 C95。&lt;/p&gt;
&lt;p&gt;（4）C99&lt;/p&gt;
&lt;p&gt;C 语言标准的第一次大型修订，发生在 1999 年，增加了许多语言特性，比如双斜杠（ &lt;code&gt;//&lt;/code&gt; ）的注释语法。这个版本称为 C99，是目前最流行的 C 版本。&lt;/p&gt;
&lt;p&gt;（5）C11&lt;/p&gt;
&lt;p&gt;2011 年，标准化组织再一次对 C 语言进行修订，增加了 Unicode 和多线程的支持。这个版本称为 C11。&lt;/p&gt;
&lt;p&gt;（6）C17&lt;/p&gt;
&lt;p&gt;C11 标准在 2017 年进行了修补，但发布是在 2018 年。新版本只是解决了 C11 的一些缺陷，没有引入任何新功能。这个版本称为 C17。&lt;/p&gt;
&lt;p&gt;（7）C2x&lt;/p&gt;
&lt;p&gt;标准化组织正在讨论 C 语言的下一个版本，据说可能会在 2023 年通过，到时就会称为 C23。&lt;/p&gt;
&lt;h2 id=&#34;c-语言的编译&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#c-语言的编译&#34;&gt;#&lt;/a&gt; C 语言的编译&lt;/h2&gt;
&lt;p&gt;C 语言是一种编译型语言，源码都是文本文件，本身无法执行。必须通过编译器，生成二进制的可执行文件，才能执行。编译器将代码从文本翻译成二进制指令的过程，就称为编译阶段，又称为 “编译时”（compile time），跟运行阶段（又称为 “运行时”）相区分。&lt;/p&gt;
&lt;p&gt;目前，最常见的 C 语言编译器是自由软件基金会推出的 GCC 编译器，它可以免费使用。本书也使用这个编译器。Linux 和 Mac 系统可以直接安装 GCC，Windows 系统可以安装 MinGW。但是，也可以不用这么麻烦，网上有在线编译器，能够直接在网页上模拟运行 C 代码，查看结果，下面就是两个这样的工具。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;CodingGround: &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly90dXRvcmlhbHNwb2ludC5jb20vY29tcGlsZV9jX29ubGluZS5waHA=&#34;&gt;https://tutorialspoint.com/compile_c_online.php&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;OnlineGDB: &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9vbmxpbmVnZGIuY29tL29ubGluZV9jX2NvbXBpbGVy&#34;&gt;https://onlinegdb.com/online_c_compiler&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;本书的例子都使用 GCC 在命令行进行编译。&lt;/p&gt;
&lt;h2 id=&#34;hello-world-示例&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#hello-world-示例&#34;&gt;#&lt;/a&gt; Hello World 示例&lt;/h2&gt;
&lt;p&gt;C 语言的源代码文件，通常以后缀名 &lt;code&gt;.c&lt;/code&gt;  结尾。下面是一个简单的 C 程序 &lt;code&gt;hello.c&lt;/code&gt; 。它就是一个普通的文本文件，任何文本编译器都能用来写。&lt;/p&gt;
&lt;figure class=&#34;highlight c&#34;&gt;&lt;figcaption data-lang=&#34;c&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token macro property&#34;&gt;&lt;span class=&#34;token directive-hash&#34;&gt;#&lt;/span&gt;&lt;span class=&#34;token directive keyword&#34;&gt;include&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&amp;lt;stdio.h&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;void&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token function&#34;&gt;printf&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;Hello World\n&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;上面这个程序的唯一作用，就是在屏幕上面显示 “Hello World”。&lt;/p&gt;
&lt;p&gt;这里不讲解这些代码是什么意思，只是作为一个例子，让大家看看 C 代码应该怎么编译和运行。假设你已经安装好了 GCC 编译器，可以打开命令行，执行下面的命令。&lt;/p&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;figcaption data-lang=&#34;bash&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;$ gcc hello.c&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;上面命令使用 &lt;code&gt;gcc&lt;/code&gt;  编译器，将源文件 &lt;code&gt;hello.c&lt;/code&gt;  编译成二进制代码。注意， &lt;code&gt;$&lt;/code&gt;  是命令行提示符，你真正需要输入的是 &lt;code&gt;$&lt;/code&gt;  后面的部分。&lt;/p&gt;
&lt;p&gt;运行这个命令以后，默认会在当前目录下生成一个编译产物文件 &lt;code&gt;a.out&lt;/code&gt; （assembler output 的缩写）。执行该文件，就会在屏幕上输出 &lt;code&gt;Hello World&lt;/code&gt; 。&lt;/p&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;figcaption data-lang=&#34;bash&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;$ ./a.out&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;Hello World&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;GCC 的 &lt;code&gt;-o&lt;/code&gt;  参数可以指定编译产物的文件名。&lt;/p&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;figcaption data-lang=&#34;bash&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;$ gcc -o hello hello.c&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;上面命令的 &lt;code&gt;-o hello&lt;/code&gt;  指定，编译产物的文件名为 &lt;code&gt;hello&lt;/code&gt; （取代 &lt;code&gt;a.out&lt;/code&gt; ）。编译后就会生成一个名叫 &lt;code&gt;hello&lt;/code&gt;  的可执行文件，相当于为 &lt;code&gt;a.out&lt;/code&gt;  指定了名称。执行该文件，也会得到同样的结果。&lt;/p&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;figcaption data-lang=&#34;bash&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;$ ./hello&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;Hello World&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;GCC 的 &lt;code&gt;-std=&lt;/code&gt;  参数还可以指定按照哪个 C 语言的标准进行编译。&lt;/p&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;figcaption data-lang=&#34;bash&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;$ gcc -std&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;c99 hello.c&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;上面命令指定按照 C99 标准进行编译。&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">http://yoursite.com/hello-world/</guid>
            <title>你来，我很高兴</title>
            <link>http://yoursite.com/hello-world/</link>
            <category term="随笔" scheme="http://yoursite.com/tags/%E9%9A%8F%E7%AC%94/" />
            <pubDate>Sun, 08 Aug 2021 20:46:30 +0800</pubDate>
            <description><![CDATA[  ]]></description>
        </item>
    </channel>
</rss>
